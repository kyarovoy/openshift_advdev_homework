// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-maven-slave",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) 

def mvnCmd = "mvn -s ./nexus_settings.xml"

{
  node('maven-slave') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    
    def appDir = "MLBParks"
    def appName = getArtifactIdFromPom("pom.xml")
    def appVer = getVersionFromPom("pom.xml")
    def devTag  = "${appVer}-${BUILD_NUMBER}"
    def prodTag = "${appVer}"
    def devProj = "${GUID}-parks-dev"
    def prodProj = "${GUID}-parks-prod"
    
    echo "Copy modified nexus_settings.xml to current directory"
    sh "sed 's/GUID/${GUID}/' ../nexus_settings.xml > ./nexus_settings.xml"
        
    dir(appDir)
    {
      stages {
        stage("Build") {
          steps {       
            sh "${mvnCmd} clean package -DskipTests"
          }
        }
        stage('Run Unit Tests') {
          steps {
            sh "${mvnCmd} test"
          }
        }
        stage('Analyze code') {
          steps { 
            def SONAR_URL = "http://sonarqube.${GUID}-sonarqube.svc:9000"
            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.projectName=${appName}-${devTag}"
          }
        }
        stage('Publish to Nexus') {
          steps { 
            def NEXUS_URL = "http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
            sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_URL}"
          }
        }
        stage('Build OpenShift Image') {
          steps { 
            echo "Building OpenShift container image mlbparks:${devTag}"        
            sh "oc -n ${devProj} start-build mlbparks --from-file=./target/${appName}.war --follow "
            openshiftTag  alias: 'false', 
                        srcStream: appName,
                        destStream: appName,
                        srcTag: 'latest',
                        destTag: devTag, 
                        namespace: devProj,
                        destinationNamespace: devProj,
                        verbose: 'false'
          }
        }
        stage('Deploy to Dev') {
          steps {
            echo "Deploying image to DevProj"                    
            sh "oc -n ${devProj} set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} "
            // sh "oc -n ${devProj} rollout latest dc/${appName} && oc rollout status dc/${APP_NAME} -w "
            // Alternative solution using OC Jenkins Plugin
            openshiftDeploy namespace: devProj, depCfg: appName,  verbose: 'false', waitTime: '', waitUnit: 'sec'
            openshiftVerifyDeployment namespace: devProj, depCfg: appName, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
            openshiftVerifyService namespace: devProj, svcName: appName, verbose: 'false'
          }
        }
    
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
